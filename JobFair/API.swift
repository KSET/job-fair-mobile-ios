//  This file was automatically generated and should not be edited.

import Apollo

/// Autogenerated input type of OnsiteRequest
public struct OnsiteRequestInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(clientMutationId: Swift.Optional<String?> = nil, companyId: Swift.Optional<GraphQLID?> = nil, note: Swift.Optional<String?> = nil, items: Swift.Optional<[OnsiteRequestItemInput?]?> = nil) {
    graphQLMap = ["clientMutationId": clientMutationId, "company_id": companyId, "note": note, "items": items]
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }

  public var companyId: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["company_id"] as! Swift.Optional<GraphQLID?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "company_id")
    }
  }

  public var note: Swift.Optional<String?> {
    get {
      return graphQLMap["note"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "note")
    }
  }

  public var items: Swift.Optional<[OnsiteRequestItemInput?]?> {
    get {
      return graphQLMap["items"] as! Swift.Optional<[OnsiteRequestItemInput?]?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "items")
    }
  }
}

public struct OnsiteRequestItemInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: Swift.Optional<GraphQLID?> = nil, requestType: Swift.Optional<OnsiteRequestType?> = nil, amount: Swift.Optional<Int?> = nil, note: Swift.Optional<String?> = nil) {
    graphQLMap = ["id": id, "request_type": requestType, "amount": amount, "note": note]
  }

  public var id: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["id"] as! Swift.Optional<GraphQLID?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var requestType: Swift.Optional<OnsiteRequestType?> {
    get {
      return graphQLMap["request_type"] as! Swift.Optional<OnsiteRequestType?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "request_type")
    }
  }

  public var amount: Swift.Optional<Int?> {
    get {
      return graphQLMap["amount"] as! Swift.Optional<Int?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "amount")
    }
  }

  public var note: Swift.Optional<String?> {
    get {
      return graphQLMap["note"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "note")
    }
  }
}

/// Type of requests companies can issue at the fair
public enum OnsiteRequestType: RawRepresentable, Equatable, Hashable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// Assistance
  case assistance
  /// Espresso
  case espresso
  /// Macchiato
  case macchiato
  /// Tea
  case tea
  /// Water
  case water
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "assistance": self = .assistance
      case "espresso": self = .espresso
      case "macchiato": self = .macchiato
      case "tea": self = .tea
      case "water": self = .water
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .assistance: return "assistance"
      case .espresso: return "espresso"
      case .macchiato: return "macchiato"
      case .tea: return "tea"
      case .water: return "water"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: OnsiteRequestType, rhs: OnsiteRequestType) -> Bool {
    switch (lhs, rhs) {
      case (.assistance, .assistance): return true
      case (.espresso, .espresso): return true
      case (.macchiato, .macchiato): return true
      case (.tea, .tea): return true
      case (.water, .water): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

/// Autogenerated input type of EventReview
public struct EventReviewInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(clientMutationId: Swift.Optional<String?> = nil, presentationId: Swift.Optional<GraphQLID?> = nil, workshopId: Swift.Optional<GraphQLID?> = nil, value: Swift.Optional<Int?> = nil, review: Swift.Optional<String?> = nil) {
    graphQLMap = ["clientMutationId": clientMutationId, "presentation_id": presentationId, "workshop_id": workshopId, "value": value, "review": review]
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }

  public var presentationId: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["presentation_id"] as! Swift.Optional<GraphQLID?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "presentation_id")
    }
  }

  public var workshopId: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["workshop_id"] as! Swift.Optional<GraphQLID?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "workshop_id")
    }
  }

  public var value: Swift.Optional<Int?> {
    get {
      return graphQLMap["value"] as! Swift.Optional<Int?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }

  public var review: Swift.Optional<String?> {
    get {
      return graphQLMap["review"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "review")
    }
  }
}

/// Autogenerated input type of ResetPassword
public struct ResetPasswordInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(clientMutationId: Swift.Optional<String?> = nil, email: Swift.Optional<String?> = nil) {
    graphQLMap = ["clientMutationId": clientMutationId, "email": email]
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }

  public var email: Swift.Optional<String?> {
    get {
      return graphQLMap["email"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }
}

/// Autogenerated input type of Login
public struct LoginInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(clientMutationId: Swift.Optional<String?> = nil, email: Swift.Optional<String?> = nil, password: Swift.Optional<String?> = nil) {
    graphQLMap = ["clientMutationId": clientMutationId, "email": email, "password": password]
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }

  public var email: Swift.Optional<String?> {
    get {
      return graphQLMap["email"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var password: Swift.Optional<String?> {
    get {
      return graphQLMap["password"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }
}

/// User role
public enum Role: RawRepresentable, Equatable, Hashable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// Nobody
  case nobody
  /// Student
  case student
  /// Account manager
  case accountManager
  /// Moderator
  case moderator
  /// Admin
  case admin
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "nobody": self = .nobody
      case "student": self = .student
      case "account_manager": self = .accountManager
      case "moderator": self = .moderator
      case "admin": self = .admin
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .nobody: return "nobody"
      case .student: return "student"
      case .accountManager: return "account_manager"
      case .moderator: return "moderator"
      case .admin: return "admin"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: Role, rhs: Role) -> Bool {
    switch (lhs, rhs) {
      case (.nobody, .nobody): return true
      case (.student, .student): return true
      case (.accountManager, .accountManager): return true
      case (.moderator, .moderator): return true
      case (.admin, .admin): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

/// Autogenerated input type of CompanyResumeReview
public struct CompanyResumeReviewInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(clientMutationId: Swift.Optional<String?> = nil, companyMemberId: Swift.Optional<GraphQLID?> = nil, resumeUid: Swift.Optional<GraphQLID?> = nil, notes: Swift.Optional<String?> = nil, followup: Swift.Optional<Bool?> = nil, social: Swift.Optional<Int?> = nil, ambition: Swift.Optional<Int?> = nil, skill: Swift.Optional<Int?> = nil) {
    graphQLMap = ["clientMutationId": clientMutationId, "company_member_id": companyMemberId, "resume_uid": resumeUid, "notes": notes, "followup": followup, "social": social, "ambition": ambition, "skill": skill]
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }

  public var companyMemberId: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["company_member_id"] as! Swift.Optional<GraphQLID?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "company_member_id")
    }
  }

  public var resumeUid: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["resume_uid"] as! Swift.Optional<GraphQLID?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "resume_uid")
    }
  }

  public var notes: Swift.Optional<String?> {
    get {
      return graphQLMap["notes"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notes")
    }
  }

  public var followup: Swift.Optional<Bool?> {
    get {
      return graphQLMap["followup"] as! Swift.Optional<Bool?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "followup")
    }
  }

  public var social: Swift.Optional<Int?> {
    get {
      return graphQLMap["social"] as! Swift.Optional<Int?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "social")
    }
  }

  public var ambition: Swift.Optional<Int?> {
    get {
      return graphQLMap["ambition"] as! Swift.Optional<Int?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ambition")
    }
  }

  public var skill: Swift.Optional<Int?> {
    get {
      return graphQLMap["skill"] as! Swift.Optional<Int?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "skill")
    }
  }
}

public final class OnSiteRequestMutation: GraphQLMutation {
  public let operationDefinition =
    "mutation OnSiteRequest($input: OnsiteRequestInput!) {\n  onsite_request(input: $input) {\n    __typename\n    data {\n      __typename\n      id\n      items {\n        __typename\n        id\n        amount\n      }\n    }\n  }\n}"

  public var input: OnsiteRequestInput

  public init(input: OnsiteRequestInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onsite_request", arguments: ["input": GraphQLVariable("input")], type: .object(OnsiteRequest.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(onsiteRequest: OnsiteRequest? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "onsite_request": onsiteRequest.flatMap { (value: OnsiteRequest) -> ResultMap in value.resultMap }])
    }

    /// Company requests a coffee, refreshment or assistance
    public var onsiteRequest: OnsiteRequest? {
      get {
        return (resultMap["onsite_request"] as? ResultMap).flatMap { OnsiteRequest(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "onsite_request")
      }
    }

    public struct OnsiteRequest: GraphQLSelectionSet {
      public static let possibleTypes = ["OnsiteRequestPayload"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("data", type: .object(Datum.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(data: Datum? = nil) {
        self.init(unsafeResultMap: ["__typename": "OnsiteRequestPayload", "data": data.flatMap { (value: Datum) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var data: Datum? {
        get {
          return (resultMap["data"] as? ResultMap).flatMap { Datum(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "data")
        }
      }

      public struct Datum: GraphQLSelectionSet {
        public static let possibleTypes = ["OnsiteRequest"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(GraphQLID.self)),
          GraphQLField("items", type: .list(.object(Item.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID? = nil, items: [Item?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "OnsiteRequest", "id": id, "items": items.flatMap { (value: [Item?]) -> [ResultMap?] in value.map { (value: Item?) -> ResultMap? in value.flatMap { (value: Item) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID? {
          get {
            return resultMap["id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var items: [Item?]? {
          get {
            return (resultMap["items"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Item?] in value.map { (value: ResultMap?) -> Item? in value.flatMap { (value: ResultMap) -> Item in Item(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Item?]) -> [ResultMap?] in value.map { (value: Item?) -> ResultMap? in value.flatMap { (value: Item) -> ResultMap in value.resultMap } } }, forKey: "items")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["OnsiteRequestItem"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .scalar(GraphQLID.self)),
            GraphQLField("amount", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: GraphQLID? = nil, amount: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "OnsiteRequestItem", "id": id, "amount": amount])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID? {
            get {
              return resultMap["id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var amount: Int? {
            get {
              return resultMap["amount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "amount")
            }
          }
        }
      }
    }
  }
}

public final class BoothsQuery: GraphQLQuery {
  public let operationDefinition =
    "query Booths {\n  booths {\n    __typename\n    id\n    geolocation\n    company {\n      __typename\n      ...CompanyDetails\n    }\n  }\n}"

  public var queryDocument: String { return operationDefinition.appending(CompanyDetails.fragmentDefinition) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("booths", type: .list(.object(Booth.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(booths: [Booth?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "booths": booths.flatMap { (value: [Booth?]) -> [ResultMap?] in value.map { (value: Booth?) -> ResultMap? in value.flatMap { (value: Booth) -> ResultMap in value.resultMap } } }])
    }

    /// Returns all Booths
    public var booths: [Booth?]? {
      get {
        return (resultMap["booths"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Booth?] in value.map { (value: ResultMap?) -> Booth? in value.flatMap { (value: ResultMap) -> Booth in Booth(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [Booth?]) -> [ResultMap?] in value.map { (value: Booth?) -> ResultMap? in value.flatMap { (value: Booth) -> ResultMap in value.resultMap } } }, forKey: "booths")
      }
    }

    public struct Booth: GraphQLSelectionSet {
      public static let possibleTypes = ["Booth"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .scalar(GraphQLID.self)),
        GraphQLField("geolocation", type: .scalar(String.self)),
        GraphQLField("company", type: .object(Company.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID? = nil, geolocation: String? = nil, company: Company? = nil) {
        self.init(unsafeResultMap: ["__typename": "Booth", "id": id, "geolocation": geolocation, "company": company.flatMap { (value: Company) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID? {
        get {
          return resultMap["id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var geolocation: String? {
        get {
          return resultMap["geolocation"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "geolocation")
        }
      }

      public var company: Company? {
        get {
          return (resultMap["company"] as? ResultMap).flatMap { Company(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "company")
        }
      }

      public struct Company: GraphQLSelectionSet {
        public static let possibleTypes = ["Company"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLFragmentSpread(CompanyDetails.self),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var companyDetails: CompanyDetails {
            get {
              return CompanyDetails(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }
      }
    }
  }
}

public final class RateEventMutation: GraphQLMutation {
  public let operationDefinition =
    "mutation RateEvent($input: EventReviewInput!) {\n  event_review(input: $input) {\n    __typename\n    clientMutationId\n  }\n}"

  public var input: EventReviewInput

  public init(input: EventReviewInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("event_review", arguments: ["input": GraphQLVariable("input")], type: .object(EventReview.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(eventReview: EventReview? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "event_review": eventReview.flatMap { (value: EventReview) -> ResultMap in value.resultMap }])
    }

    /// User review of a workshop or a presentation
    public var eventReview: EventReview? {
      get {
        return (resultMap["event_review"] as? ResultMap).flatMap { EventReview(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "event_review")
      }
    }

    public struct EventReview: GraphQLSelectionSet {
      public static let possibleTypes = ["EventReviewPayload"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("clientMutationId", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(clientMutationId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "EventReviewPayload", "clientMutationId": clientMutationId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// A unique identifier for the client performing the mutation.
      public var clientMutationId: String? {
        get {
          return resultMap["clientMutationId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "clientMutationId")
        }
      }
    }
  }
}

public final class ResetPasswordMutation: GraphQLMutation {
  public let operationDefinition =
    "mutation ResetPassword($input: ResetPasswordInput!) {\n  reset_password(input: $input) {\n    __typename\n    success\n  }\n}"

  public var input: ResetPasswordInput

  public init(input: ResetPasswordInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("reset_password", arguments: ["input": GraphQLVariable("input")], type: .object(ResetPassword.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(resetPassword: ResetPassword? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "reset_password": resetPassword.flatMap { (value: ResetPassword) -> ResultMap in value.resultMap }])
    }

    /// Generate and send reset password link for the user with specifiedemail address
    public var resetPassword: ResetPassword? {
      get {
        return (resultMap["reset_password"] as? ResultMap).flatMap { ResetPassword(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "reset_password")
      }
    }

    public struct ResetPassword: GraphQLSelectionSet {
      public static let possibleTypes = ["ResetPasswordPayload"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "ResetPasswordPayload", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class WorkshopsQuery: GraphQLQuery {
  public let operationDefinition =
    "query Workshops {\n  workshops {\n    __typename\n    id\n    occures_at\n    finishes_at\n    location\n    geolocation\n    name\n    description\n    company {\n      __typename\n      ...CompanyDetails\n    }\n  }\n}"

  public var queryDocument: String { return operationDefinition.appending(CompanyDetails.fragmentDefinition) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("workshops", type: .list(.object(Workshop.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(workshops: [Workshop?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "workshops": workshops.flatMap { (value: [Workshop?]) -> [ResultMap?] in value.map { (value: Workshop?) -> ResultMap? in value.flatMap { (value: Workshop) -> ResultMap in value.resultMap } } }])
    }

    /// Returns all Industry
    public var workshops: [Workshop?]? {
      get {
        return (resultMap["workshops"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Workshop?] in value.map { (value: ResultMap?) -> Workshop? in value.flatMap { (value: ResultMap) -> Workshop in Workshop(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [Workshop?]) -> [ResultMap?] in value.map { (value: Workshop?) -> ResultMap? in value.flatMap { (value: Workshop) -> ResultMap in value.resultMap } } }, forKey: "workshops")
      }
    }

    public struct Workshop: GraphQLSelectionSet {
      public static let possibleTypes = ["Workshop"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .scalar(GraphQLID.self)),
        GraphQLField("occures_at", type: .scalar(String.self)),
        GraphQLField("finishes_at", type: .scalar(String.self)),
        GraphQLField("location", type: .scalar(String.self)),
        GraphQLField("geolocation", type: .scalar(String.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("company", type: .object(Company.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID? = nil, occuresAt: String? = nil, finishesAt: String? = nil, location: String? = nil, geolocation: String? = nil, name: String? = nil, description: String? = nil, company: Company? = nil) {
        self.init(unsafeResultMap: ["__typename": "Workshop", "id": id, "occures_at": occuresAt, "finishes_at": finishesAt, "location": location, "geolocation": geolocation, "name": name, "description": description, "company": company.flatMap { (value: Company) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID? {
        get {
          return resultMap["id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var occuresAt: String? {
        get {
          return resultMap["occures_at"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "occures_at")
        }
      }

      public var finishesAt: String? {
        get {
          return resultMap["finishes_at"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "finishes_at")
        }
      }

      public var location: String? {
        get {
          return resultMap["location"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "location")
        }
      }

      public var geolocation: String? {
        get {
          return resultMap["geolocation"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "geolocation")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var company: Company? {
        get {
          return (resultMap["company"] as? ResultMap).flatMap { Company(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "company")
        }
      }

      public struct Company: GraphQLSelectionSet {
        public static let possibleTypes = ["Company"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLFragmentSpread(CompanyDetails.self),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var companyDetails: CompanyDetails {
            get {
              return CompanyDetails(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }
      }
    }
  }
}

public final class LoginQueryMutation: GraphQLMutation {
  public let operationDefinition =
    "mutation LoginQuery($input: LoginInput!) {\n  login(input: $input) {\n    __typename\n    user {\n      __typename\n      first_name\n      last_name\n      email\n      name\n      role\n      resume {\n        __typename\n        uid\n      }\n      companies {\n        __typename\n        ...CompanyDetails\n      }\n    }\n    token\n  }\n}"

  public var queryDocument: String { return operationDefinition.appending(CompanyDetails.fragmentDefinition) }

  public var input: LoginInput

  public init(input: LoginInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("login", arguments: ["input": GraphQLVariable("input")], type: .object(Login.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(login: Login? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "login": login.flatMap { (value: Login) -> ResultMap in value.resultMap }])
    }

    /// Returns a user and their token for the given username and password. The `token` should be sent with each requestin the `Authorization` header prefixed with `jwt ` (e.g. `jwt <token>`). Tokens expire after 10 minutes.
    public var login: Login? {
      get {
        return (resultMap["login"] as? ResultMap).flatMap { Login(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "login")
      }
    }

    public struct Login: GraphQLSelectionSet {
      public static let possibleTypes = ["LoginPayload"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("token", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(user: User? = nil, token: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "LoginPayload", "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "token": token])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("first_name", type: .scalar(String.self)),
          GraphQLField("last_name", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("role", type: .scalar(Role.self)),
          GraphQLField("resume", type: .object(Resume.selections)),
          GraphQLField("companies", type: .list(.object(Company.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(firstName: String? = nil, lastName: String? = nil, email: String? = nil, name: String? = nil, role: Role? = nil, resume: Resume? = nil, companies: [Company?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "User", "first_name": firstName, "last_name": lastName, "email": email, "name": name, "role": role, "resume": resume.flatMap { (value: Resume) -> ResultMap in value.resultMap }, "companies": companies.flatMap { (value: [Company?]) -> [ResultMap?] in value.map { (value: Company?) -> ResultMap? in value.flatMap { (value: Company) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var firstName: String? {
          get {
            return resultMap["first_name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "first_name")
          }
        }

        public var lastName: String? {
          get {
            return resultMap["last_name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "last_name")
          }
        }

        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var role: Role? {
          get {
            return resultMap["role"] as? Role
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }

        public var resume: Resume? {
          get {
            return (resultMap["resume"] as? ResultMap).flatMap { Resume(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "resume")
          }
        }

        public var companies: [Company?]? {
          get {
            return (resultMap["companies"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Company?] in value.map { (value: ResultMap?) -> Company? in value.flatMap { (value: ResultMap) -> Company in Company(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Company?]) -> [ResultMap?] in value.map { (value: Company?) -> ResultMap? in value.flatMap { (value: Company) -> ResultMap in value.resultMap } } }, forKey: "companies")
          }
        }

        public struct Resume: GraphQLSelectionSet {
          public static let possibleTypes = ["Resume"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("uid", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(uid: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "Resume", "uid": uid])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var uid: String? {
            get {
              return resultMap["uid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "uid")
            }
          }
        }

        public struct Company: GraphQLSelectionSet {
          public static let possibleTypes = ["Company"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLFragmentSpread(CompanyDetails.self),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var fragments: Fragments {
            get {
              return Fragments(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }

          public struct Fragments {
            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public var companyDetails: CompanyDetails {
              get {
                return CompanyDetails(unsafeResultMap: resultMap)
              }
              set {
                resultMap += newValue.resultMap
              }
            }
          }
        }
      }
    }
  }
}

public final class PresentationsQuery: GraphQLQuery {
  public let operationDefinition =
    "query Presentations {\n  presentations {\n    __typename\n    id\n    occures_at\n    finishes_at\n    location\n    geolocation\n    description\n    presenter_bio\n    title\n    presenter_photo {\n      __typename\n      medium {\n        __typename\n        url\n      }\n    }\n    company {\n      __typename\n      ...CompanyDetails\n    }\n  }\n}"

  public var queryDocument: String { return operationDefinition.appending(CompanyDetails.fragmentDefinition) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("presentations", type: .list(.object(Presentation.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(presentations: [Presentation?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "presentations": presentations.flatMap { (value: [Presentation?]) -> [ResultMap?] in value.map { (value: Presentation?) -> ResultMap? in value.flatMap { (value: Presentation) -> ResultMap in value.resultMap } } }])
    }

    /// Returns all Presentations
    public var presentations: [Presentation?]? {
      get {
        return (resultMap["presentations"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Presentation?] in value.map { (value: ResultMap?) -> Presentation? in value.flatMap { (value: ResultMap) -> Presentation in Presentation(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [Presentation?]) -> [ResultMap?] in value.map { (value: Presentation?) -> ResultMap? in value.flatMap { (value: Presentation) -> ResultMap in value.resultMap } } }, forKey: "presentations")
      }
    }

    public struct Presentation: GraphQLSelectionSet {
      public static let possibleTypes = ["Presentation"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .scalar(GraphQLID.self)),
        GraphQLField("occures_at", type: .scalar(String.self)),
        GraphQLField("finishes_at", type: .scalar(String.self)),
        GraphQLField("location", type: .scalar(String.self)),
        GraphQLField("geolocation", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("presenter_bio", type: .scalar(String.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("presenter_photo", type: .object(PresenterPhoto.selections)),
        GraphQLField("company", type: .object(Company.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID? = nil, occuresAt: String? = nil, finishesAt: String? = nil, location: String? = nil, geolocation: String? = nil, description: String? = nil, presenterBio: String? = nil, title: String? = nil, presenterPhoto: PresenterPhoto? = nil, company: Company? = nil) {
        self.init(unsafeResultMap: ["__typename": "Presentation", "id": id, "occures_at": occuresAt, "finishes_at": finishesAt, "location": location, "geolocation": geolocation, "description": description, "presenter_bio": presenterBio, "title": title, "presenter_photo": presenterPhoto.flatMap { (value: PresenterPhoto) -> ResultMap in value.resultMap }, "company": company.flatMap { (value: Company) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID? {
        get {
          return resultMap["id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var occuresAt: String? {
        get {
          return resultMap["occures_at"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "occures_at")
        }
      }

      public var finishesAt: String? {
        get {
          return resultMap["finishes_at"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "finishes_at")
        }
      }

      public var location: String? {
        get {
          return resultMap["location"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "location")
        }
      }

      public var geolocation: String? {
        get {
          return resultMap["geolocation"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "geolocation")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var presenterBio: String? {
        get {
          return resultMap["presenter_bio"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "presenter_bio")
        }
      }

      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var presenterPhoto: PresenterPhoto? {
        get {
          return (resultMap["presenter_photo"] as? ResultMap).flatMap { PresenterPhoto(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "presenter_photo")
        }
      }

      public var company: Company? {
        get {
          return (resultMap["company"] as? ResultMap).flatMap { Company(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "company")
        }
      }

      public struct PresenterPhoto: GraphQLSelectionSet {
        public static let possibleTypes = ["Image"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("medium", type: .object(Medium.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(medium: Medium? = nil) {
          self.init(unsafeResultMap: ["__typename": "Image", "medium": medium.flatMap { (value: Medium) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var medium: Medium? {
          get {
            return (resultMap["medium"] as? ResultMap).flatMap { Medium(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "medium")
          }
        }

        public struct Medium: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageVariant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("url", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(url: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageVariant", "url": url])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var url: String? {
            get {
              return resultMap["url"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "url")
            }
          }
        }
      }

      public struct Company: GraphQLSelectionSet {
        public static let possibleTypes = ["Company"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLFragmentSpread(CompanyDetails.self),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var companyDetails: CompanyDetails {
            get {
              return CompanyDetails(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }
      }
    }
  }
}

public final class IndustriesQuery: GraphQLQuery {
  public let operationDefinition =
    "query Industries {\n  industries {\n    __typename\n    id\n    name\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("industries", type: .list(.object(Industry.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(industries: [Industry?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "industries": industries.flatMap { (value: [Industry?]) -> [ResultMap?] in value.map { (value: Industry?) -> ResultMap? in value.flatMap { (value: Industry) -> ResultMap in value.resultMap } } }])
    }

    /// Returns all Industries
    public var industries: [Industry?]? {
      get {
        return (resultMap["industries"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Industry?] in value.map { (value: ResultMap?) -> Industry? in value.flatMap { (value: ResultMap) -> Industry in Industry(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [Industry?]) -> [ResultMap?] in value.map { (value: Industry?) -> ResultMap? in value.flatMap { (value: Industry) -> ResultMap in value.resultMap } } }, forKey: "industries")
      }
    }

    public struct Industry: GraphQLSelectionSet {
      public static let possibleTypes = ["Industry"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .scalar(GraphQLID.self)),
        GraphQLField("name", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: GraphQLID? = nil, name: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Industry", "id": id, "name": name])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID? {
        get {
          return resultMap["id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }
    }
  }
}

public final class StudentReviewMutation: GraphQLMutation {
  public let operationDefinition =
    "mutation StudentReview($input: CompanyResumeReviewInput!) {\n  company_resume_review(input: $input) {\n    __typename\n    data {\n      __typename\n      id\n    }\n  }\n}"

  public var input: CompanyResumeReviewInput

  public init(input: CompanyResumeReviewInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("company_resume_review", arguments: ["input": GraphQLVariable("input")], type: .object(CompanyResumeReview.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(companyResumeReview: CompanyResumeReview? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "company_resume_review": companyResumeReview.flatMap { (value: CompanyResumeReview) -> ResultMap in value.resultMap }])
    }

    /// Review student resume by company.Company is resolved by company `company_member` belongs to
    public var companyResumeReview: CompanyResumeReview? {
      get {
        return (resultMap["company_resume_review"] as? ResultMap).flatMap { CompanyResumeReview(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "company_resume_review")
      }
    }

    public struct CompanyResumeReview: GraphQLSelectionSet {
      public static let possibleTypes = ["CompanyResumeReviewPayload"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("data", type: .object(Datum.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(data: Datum? = nil) {
        self.init(unsafeResultMap: ["__typename": "CompanyResumeReviewPayload", "data": data.flatMap { (value: Datum) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var data: Datum? {
        get {
          return (resultMap["data"] as? ResultMap).flatMap { Datum(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "data")
        }
      }

      public struct Datum: GraphQLSelectionSet {
        public static let possibleTypes = ["CompanyResumeReview"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(GraphQLID.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID? = nil) {
          self.init(unsafeResultMap: ["__typename": "CompanyResumeReview", "id": id])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID? {
          get {
            return resultMap["id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }
      }
    }
  }
}

public final class CompaniesQuery: GraphQLQuery {
  public let operationDefinition =
    "query Companies {\n  companies {\n    __typename\n    ...CompanyDetails\n  }\n}"

  public var queryDocument: String { return operationDefinition.appending(CompanyDetails.fragmentDefinition) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("companies", type: .list(.object(Company.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(companies: [Company?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "companies": companies.flatMap { (value: [Company?]) -> [ResultMap?] in value.map { (value: Company?) -> ResultMap? in value.flatMap { (value: Company) -> ResultMap in value.resultMap } } }])
    }

    /// Returns all Companies
    public var companies: [Company?]? {
      get {
        return (resultMap["companies"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Company?] in value.map { (value: ResultMap?) -> Company? in value.flatMap { (value: ResultMap) -> Company in Company(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [Company?]) -> [ResultMap?] in value.map { (value: Company?) -> ResultMap? in value.flatMap { (value: Company) -> ResultMap in value.resultMap } } }, forKey: "companies")
      }
    }

    public struct Company: GraphQLSelectionSet {
      public static let possibleTypes = ["Company"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLFragmentSpread(CompanyDetails.self),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var fragments: Fragments {
        get {
          return Fragments(unsafeResultMap: resultMap)
        }
        set {
          resultMap += newValue.resultMap
        }
      }

      public struct Fragments {
        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var companyDetails: CompanyDetails {
          get {
            return CompanyDetails(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }
      }
    }
  }
}

public final class CurrentUserQuery: GraphQLQuery {
  public let operationDefinition =
    "query CurrentUser {\n  current_user {\n    __typename\n    first_name\n    last_name\n    email\n    name\n    role\n    resume {\n      __typename\n      uid\n    }\n    companies {\n      __typename\n      ...CompanyDetails\n    }\n  }\n}"

  public var queryDocument: String { return operationDefinition.appending(CompanyDetails.fragmentDefinition) }

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("current_user", type: .object(CurrentUser.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(currentUser: CurrentUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "current_user": currentUser.flatMap { (value: CurrentUser) -> ResultMap in value.resultMap }])
    }

    /// Returns the current user
    public var currentUser: CurrentUser? {
      get {
        return (resultMap["current_user"] as? ResultMap).flatMap { CurrentUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "current_user")
      }
    }

    public struct CurrentUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("first_name", type: .scalar(String.self)),
        GraphQLField("last_name", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("role", type: .scalar(Role.self)),
        GraphQLField("resume", type: .object(Resume.selections)),
        GraphQLField("companies", type: .list(.object(Company.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(firstName: String? = nil, lastName: String? = nil, email: String? = nil, name: String? = nil, role: Role? = nil, resume: Resume? = nil, companies: [Company?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "first_name": firstName, "last_name": lastName, "email": email, "name": name, "role": role, "resume": resume.flatMap { (value: Resume) -> ResultMap in value.resultMap }, "companies": companies.flatMap { (value: [Company?]) -> [ResultMap?] in value.map { (value: Company?) -> ResultMap? in value.flatMap { (value: Company) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var firstName: String? {
        get {
          return resultMap["first_name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "first_name")
        }
      }

      public var lastName: String? {
        get {
          return resultMap["last_name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "last_name")
        }
      }

      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var role: Role? {
        get {
          return resultMap["role"] as? Role
        }
        set {
          resultMap.updateValue(newValue, forKey: "role")
        }
      }

      public var resume: Resume? {
        get {
          return (resultMap["resume"] as? ResultMap).flatMap { Resume(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "resume")
        }
      }

      public var companies: [Company?]? {
        get {
          return (resultMap["companies"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Company?] in value.map { (value: ResultMap?) -> Company? in value.flatMap { (value: ResultMap) -> Company in Company(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Company?]) -> [ResultMap?] in value.map { (value: Company?) -> ResultMap? in value.flatMap { (value: Company) -> ResultMap in value.resultMap } } }, forKey: "companies")
        }
      }

      public struct Resume: GraphQLSelectionSet {
        public static let possibleTypes = ["Resume"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("uid", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(uid: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Resume", "uid": uid])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }
      }

      public struct Company: GraphQLSelectionSet {
        public static let possibleTypes = ["Company"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLFragmentSpread(CompanyDetails.self),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var fragments: Fragments {
          get {
            return Fragments(unsafeResultMap: resultMap)
          }
          set {
            resultMap += newValue.resultMap
          }
        }

        public struct Fragments {
          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public var companyDetails: CompanyDetails {
            get {
              return CompanyDetails(unsafeResultMap: resultMap)
            }
            set {
              resultMap += newValue.resultMap
            }
          }
        }
      }
    }
  }
}

public struct CompanyDetails: GraphQLFragment {
  public static let fragmentDefinition =
    "fragment CompanyDetails on Company {\n  __typename\n  id\n  name\n  homepage_url\n  short_description\n  industry {\n    __typename\n    id\n    name\n  }\n  logo {\n    __typename\n    medium {\n      __typename\n      url\n    }\n  }\n  presentation {\n    __typename\n    title\n    occures_at\n  }\n  workshop {\n    __typename\n    name\n    occures_at\n  }\n  cocktail {\n    __typename\n    name\n  }\n  booth {\n    __typename\n    id\n    location\n  }\n}"

  public static let possibleTypes = ["Company"]

  public static let selections: [GraphQLSelection] = [
    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
    GraphQLField("id", type: .scalar(GraphQLID.self)),
    GraphQLField("name", type: .scalar(String.self)),
    GraphQLField("homepage_url", type: .scalar(String.self)),
    GraphQLField("short_description", type: .scalar(String.self)),
    GraphQLField("industry", type: .object(Industry.selections)),
    GraphQLField("logo", type: .object(Logo.selections)),
    GraphQLField("presentation", type: .object(Presentation.selections)),
    GraphQLField("workshop", type: .object(Workshop.selections)),
    GraphQLField("cocktail", type: .object(Cocktail.selections)),
    GraphQLField("booth", type: .object(Booth.selections)),
  ]

  public private(set) var resultMap: ResultMap

  public init(unsafeResultMap: ResultMap) {
    self.resultMap = unsafeResultMap
  }

  public init(id: GraphQLID? = nil, name: String? = nil, homepageUrl: String? = nil, shortDescription: String? = nil, industry: Industry? = nil, logo: Logo? = nil, presentation: Presentation? = nil, workshop: Workshop? = nil, cocktail: Cocktail? = nil, booth: Booth? = nil) {
    self.init(unsafeResultMap: ["__typename": "Company", "id": id, "name": name, "homepage_url": homepageUrl, "short_description": shortDescription, "industry": industry.flatMap { (value: Industry) -> ResultMap in value.resultMap }, "logo": logo.flatMap { (value: Logo) -> ResultMap in value.resultMap }, "presentation": presentation.flatMap { (value: Presentation) -> ResultMap in value.resultMap }, "workshop": workshop.flatMap { (value: Workshop) -> ResultMap in value.resultMap }, "cocktail": cocktail.flatMap { (value: Cocktail) -> ResultMap in value.resultMap }, "booth": booth.flatMap { (value: Booth) -> ResultMap in value.resultMap }])
  }

  public var __typename: String {
    get {
      return resultMap["__typename"]! as! String
    }
    set {
      resultMap.updateValue(newValue, forKey: "__typename")
    }
  }

  public var id: GraphQLID? {
    get {
      return resultMap["id"] as? GraphQLID
    }
    set {
      resultMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String? {
    get {
      return resultMap["name"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "name")
    }
  }

  public var homepageUrl: String? {
    get {
      return resultMap["homepage_url"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "homepage_url")
    }
  }

  public var shortDescription: String? {
    get {
      return resultMap["short_description"] as? String
    }
    set {
      resultMap.updateValue(newValue, forKey: "short_description")
    }
  }

  public var industry: Industry? {
    get {
      return (resultMap["industry"] as? ResultMap).flatMap { Industry(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "industry")
    }
  }

  public var logo: Logo? {
    get {
      return (resultMap["logo"] as? ResultMap).flatMap { Logo(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "logo")
    }
  }

  public var presentation: Presentation? {
    get {
      return (resultMap["presentation"] as? ResultMap).flatMap { Presentation(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "presentation")
    }
  }

  public var workshop: Workshop? {
    get {
      return (resultMap["workshop"] as? ResultMap).flatMap { Workshop(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "workshop")
    }
  }

  public var cocktail: Cocktail? {
    get {
      return (resultMap["cocktail"] as? ResultMap).flatMap { Cocktail(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "cocktail")
    }
  }

  public var booth: Booth? {
    get {
      return (resultMap["booth"] as? ResultMap).flatMap { Booth(unsafeResultMap: $0) }
    }
    set {
      resultMap.updateValue(newValue?.resultMap, forKey: "booth")
    }
  }

  public struct Industry: GraphQLSelectionSet {
    public static let possibleTypes = ["Industry"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("id", type: .scalar(GraphQLID.self)),
      GraphQLField("name", type: .scalar(String.self)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(id: GraphQLID? = nil, name: String? = nil) {
      self.init(unsafeResultMap: ["__typename": "Industry", "id": id, "name": name])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var id: GraphQLID? {
      get {
        return resultMap["id"] as? GraphQLID
      }
      set {
        resultMap.updateValue(newValue, forKey: "id")
      }
    }

    public var name: String? {
      get {
        return resultMap["name"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "name")
      }
    }
  }

  public struct Logo: GraphQLSelectionSet {
    public static let possibleTypes = ["Image"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("medium", type: .object(Medium.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(medium: Medium? = nil) {
      self.init(unsafeResultMap: ["__typename": "Image", "medium": medium.flatMap { (value: Medium) -> ResultMap in value.resultMap }])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var medium: Medium? {
      get {
        return (resultMap["medium"] as? ResultMap).flatMap { Medium(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "medium")
      }
    }

    public struct Medium: GraphQLSelectionSet {
      public static let possibleTypes = ["ImageVariant"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("url", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(url: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "ImageVariant", "url": url])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var url: String? {
        get {
          return resultMap["url"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "url")
        }
      }
    }
  }

  public struct Presentation: GraphQLSelectionSet {
    public static let possibleTypes = ["Presentation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("title", type: .scalar(String.self)),
      GraphQLField("occures_at", type: .scalar(String.self)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(title: String? = nil, occuresAt: String? = nil) {
      self.init(unsafeResultMap: ["__typename": "Presentation", "title": title, "occures_at": occuresAt])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var title: String? {
      get {
        return resultMap["title"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "title")
      }
    }

    public var occuresAt: String? {
      get {
        return resultMap["occures_at"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "occures_at")
      }
    }
  }

  public struct Workshop: GraphQLSelectionSet {
    public static let possibleTypes = ["Workshop"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("name", type: .scalar(String.self)),
      GraphQLField("occures_at", type: .scalar(String.self)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(name: String? = nil, occuresAt: String? = nil) {
      self.init(unsafeResultMap: ["__typename": "Workshop", "name": name, "occures_at": occuresAt])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var name: String? {
      get {
        return resultMap["name"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "name")
      }
    }

    public var occuresAt: String? {
      get {
        return resultMap["occures_at"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "occures_at")
      }
    }
  }

  public struct Cocktail: GraphQLSelectionSet {
    public static let possibleTypes = ["Cocktail"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("name", type: .scalar(String.self)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(name: String? = nil) {
      self.init(unsafeResultMap: ["__typename": "Cocktail", "name": name])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var name: String? {
      get {
        return resultMap["name"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "name")
      }
    }
  }

  public struct Booth: GraphQLSelectionSet {
    public static let possibleTypes = ["Booth"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
      GraphQLField("id", type: .scalar(GraphQLID.self)),
      GraphQLField("location", type: .scalar(String.self)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(id: GraphQLID? = nil, location: String? = nil) {
      self.init(unsafeResultMap: ["__typename": "Booth", "id": id, "location": location])
    }

    public var __typename: String {
      get {
        return resultMap["__typename"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "__typename")
      }
    }

    public var id: GraphQLID? {
      get {
        return resultMap["id"] as? GraphQLID
      }
      set {
        resultMap.updateValue(newValue, forKey: "id")
      }
    }

    public var location: String? {
      get {
        return resultMap["location"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "location")
      }
    }
  }
}